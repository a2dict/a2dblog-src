---
title: 编程这件小事
date: 2019-11-23 13:16:01
tags: 随笔
---

我喜欢喝茶，有一次朋友问我如何品茶。我从没认真考虑过，印象中我只是喝过不少茶叶。而喝过好茶后，很难再忍受难喝的茶。这就是对茶的品味吧？

不只是喝茶，编程也是这么一回事。当学了很多编程语言和框架技术后，人会形成自己的编程品味。我一直很怀疑，那些认为编程语言/技术无差别的人，是怎样一种品味？

Paul Graham(《黑客与画家》作者)发现，程序员普遍都有一个错觉，倾向认为自己使用的编程语言是最好的。
比如一个Go程序员，他会觉得比Go更低级的语言C/C++没有GC很难用；而对于比Go更高级的语言Rust，反正Macro和泛型能实现的东西Go也以实现，所以Go是世界最好的编程语言？！

要想突破这个认识误区，唯一的方法是学习多种不同类型的编程语言，掌握多种编程思想，研究PL。

研究PL是件低回报率的事，大部分人觉得有这个精力还不如多学习几个框架或类库实在一点。
在学习这件事上，大多数人是为了有用，而有的人是为了**有趣**。

我最早的编程体验在小学6年级。那时家里有了第一台电脑，我怀着热情买了一本计算机组成原理的书，书名早已忘了。
书中有一章讲的是vb入门。我最早的编程经验是写vbs和bat，像这样

```vb
do
  msgbox "你关不掉我哦"
loop
```

像这样整蛊小伙伴，感觉还挺好玩的。

高一的时候才开始系统地学习编程，那时学的是C。

为什么选择C而不是VB/Python/Java/PHP/易语言...呢？
那时听说所有程序员都应该学习C，C是学习其它所有语言的基础。
虽然总感觉不怎么靠谱，还是先学了再说。
我对学习的态度好像那时候就开始显现出来了。如果不知道一件东西有没有用，先学了再说，说不定以后用得上。
就算用不上也没关系，反正人学过的东西/看过的书至少有80%一辈子都用不上，多一件又不多。


# 编程与抽象

编程是一项抽象工作，构建现实问题的抽象，用计算模拟现实。
编程的本质是构建合适的抽象来管理现实问题的复杂度。

构建抽象有多种方式：代码抽象、数据抽象、元语言抽象。

## 代码抽象

代码抽象应该是最直接的抽象方法。它把现实看成一个个对象（或结构体），用代码来操作它。

有经验的程序员懂得将一组操作再抽象成Method，用更高级的抽象管理问题。

## 数据抽象

我发现很多程序员并不区分数据与代码，他们常常把配置与规则脚本混在一起。

什么是代码？什么是数据？
数据是一种声明式、结构性的实体，比如DB数据、yaml配置文件。
而代码是指一组行为的描述，比如“连接DB，从Customer表读第2行数据”，或“IO打开config.yaml，并反序列化到&Config”。

“数据驱动”是一种设计思想。
程序员应该认识问题的边界，区分变化与不变，对不变进行编程，让变化可配置，用数据驱动程序。

这种设计思想在很多领域都有体现。前端的HTML就是一种数据，K8s的声明式配置也是一种数据...

最近，尤其在前端，还展现出了一种编程的趋势，将更复杂的数据嵌入到代码中，用“数据”编程。
比如：JSX的html扩展、Dart的DSL等... 
在后端，现代的高级编程语言也大都支持DSL扩展，Rust的macro、kotlin的DSL...；scala每学一个新的lib就好像学习一门新的语言 hhhhhhh

## 元语言抽象

当遇到更复杂且通用领域问题时，可能需要构建**元语言抽象**来管理问题的复杂性。
这方面最具代表性的例子是**正则表达式**和**SQL**。正则表达式现在几乎无处不在了，以致于很多人视它理所当然，却没意识到它是一门DSL。
最近好像有个expr的DSL也挺热门，工作中也用上了。

不过我一般并不建议自定义DSL。大部分编程上遇到的问题，还没有复杂到需要构建元语言抽象的程度；而且以包括我在内的大多数程序员的水平，还不足已构建出合适的DSL。

# 我的代码品味

代码写得多后，我更关注整体设计而非具体技术。好的设计应该是“简单”的，它应该能反映现实问题的复杂度，而不引入多余的概念。

当我需要一个Web服务，我想看到的是仅包含“路由与绑定”的代码。若想引入多余的概念，Prove IT!!

```groovy
server {
    get('/') {
        render "Hello World!"
    }
    get('spanish') {
        render "Hola Mundo!"
    }
    get('/salute/:name') {
        render "Hello ${req.params.name}!"
    }
}.start(3000)
```

# 高低级编程语言的差别

高级编程语言提供更强大的抽象能力，允许程序员构建更高级的抽象，更好的管理问题。
现代编程语言的两个主要发展方向是：Meta-programming & Type-level Programming。
两个方向的代表分别是 Lisp & Haskell。

Rust 和 Scala 是两门尝试混合这两方面特性的现代编程语言。

如果一个功能用高级语言可以编写，那用低级语言也一定可以写出来，只是过程会很痛苦。
用高级语言编程的话，重构时间常常比编码时间多（常常3倍以上，一个原因是写得快），因为高级语言提供了更多抽象优化空间。


<!-- 
# 附录

编程的过程，就是以纯文本的形式组织出反映现实问题的代码。
所以程序员喜欢“纯文本”，处理得最多的也是纯文本。
下面用纯文本的处理问题，来展示不同语言的编程能力。
 -->
